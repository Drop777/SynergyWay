{"version":3,"sources":["store/actionTypes.js","store/reducer.js","store/store.js","api/products.js","store/actions.js","Components/Product/Product.jsx","Components/Product/index.js","Components/Catalog/Catalog.jsx","Components/Catalog/index.js","Components/Basket/Basket.jsx","Components/Basket/index.js","Components/App/App.jsx","Components/App/index.js","serviceWorker.js","index.jsx"],"names":["ACTION_TYPES","initialState","localStorage","JSON","parse","products","basket","itemsInBasket","reducer","state","action","type","payload","find","item","id","map","amount","filter","store","createStore","composeWithDevTools","subscribe","stringify","getState","name","label","price","Product","addToBasket","Card","CardContent","Typography","variant","component","CardActions","Button","color","onClick","connectedProducts","connect","dispatch","Products","Catalog","className","key","connectedCatalog","Basket","deleteItem","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","Math","random","scope","forEach","totalPrice","connectedBasket","App","totalAmount","props","loadData","this","AppBar","position","Toolbar","style","display","justifyContent","noWrap","to","IconButton","Badge","badgeContent","path","React","Component","connectedApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a2f9e9f.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  LOAD_DATA: 'LOAD_DATA',\n  ADD_TO_BASKET: 'ADD_TO_BASKET',\n  DELETE_ITEM: 'DELETE_ITEM',\n};\n","import { ACTION_TYPES } from './actionTypes';\n\nconst initialState = localStorage['redux-store']\n  ? JSON.parse(localStorage['redux-store'])\n  : {\n    products: [],\n    basket: [],\n    itemsInBasket: 0,\n  };\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.LOAD_DATA:\n      return {\n        ...state,\n        products: [...action.payload],\n      };\n    case ACTION_TYPES.ADD_TO_BASKET:\n      return {\n        ...state,\n        basket: [...state.basket].find((item) => item.id === action.payload.id)\n          ? [...state.basket].map((item) => {\n            if (item.id === action.payload.id) {\n              // eslint-disable-next-line no-return-assign\n              return {\n                ...item,\n                amount: item.amount += 1,\n              };\n            }\n            return item;\n          })\n          : [...state.basket, action.payload],\n      };\n    case ACTION_TYPES.DELETE_ITEM:\n      return {\n        ...state,\n        basket: [...state.basket].filter((item) => item.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer, composeWithDevTools());\n\nstore.subscribe(() => {\n  localStorage['redux-store'] = JSON.stringify(store.getState());\n});\n","export const products = [\n  {\n    id: 1,\n    name: 'article 1',\n    label: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    price: 25,\n  },\n  {\n    id: 2,\n    name: 'article 2',\n    label: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    price: 35,\n  },\n  {\n    id: 3,\n    name: 'article 3',\n    label: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit,sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n    price: 45,\n  },\n];\n","import { ACTION_TYPES } from './actionTypes';\nimport { products } from '../api/products';\n\nexport const loadData = () => ({\n  type: ACTION_TYPES.LOAD_DATA,\n  payload: products,\n});\n\nexport const addToBasket = (item) => ({\n  type: ACTION_TYPES.ADD_TO_BASKET,\n  payload: {\n    ...item,\n    amount: 1,\n  },\n});\n\nexport const deleteItem = (id) => ({\n  type: ACTION_TYPES.DELETE_ITEM,\n  payload: id,\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst Product = ({ item, addToBasket }) => (\n  <Card>\n    <CardContent>\n      <Typography variant=\"h4\" component=\"h2\">\n        {item.name}\n      </Typography>\n      <Typography variant=\"body1\" component=\"p\">\n        {item.label}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h2\">\n        Price:\n        {item.price}\n        $\n      </Typography>\n    </CardContent>\n    <CardActions>\n      <Button variant=\"contained\" color=\"primary\" onClick={() => addToBasket(item)}>Add</Button>\n    </CardActions>\n  </Card>\n);\n\nProduct.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string,\n    label: PropTypes.string,\n    price: PropTypes.number,\n  }),\n  addToBasket: PropTypes.func,\n}.isRequaired;\n\nexport default Product;\n","import { connect } from 'react-redux';\nimport { addToBasket } from '../../store/actions';\nimport Products from './Product';\n\nconst mapDispatchToProps = (dispatch) => ({\n  addToBasket: (item) => dispatch(addToBasket(item)),\n});\n\nconst connectedProducts = connect(null, mapDispatchToProps)(Products);\n\nexport {\n  connectedProducts as Product,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Product } from '../Product/index';\nimport './Catalog.css';\n\nconst Catalog = ({ products }) => (\n  <div>\n    <ul className=\"list\">\n      {products.map((item) => <li className=\"item\" key={item.id}><Product item={item} /></li>)}\n    </ul>\n  </div>\n);\n\nCatalog.propTypes = {\n  products: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    price: PropTypes.number,\n  })),\n}.isRequaired;\n\nexport default Catalog;\n","import { connect } from 'react-redux';\nimport Catalog from './Catalog';\n\nconst mapStateToProps = (state) => ({\n  products: state.products,\n});\n\nconst connectedCatalog = connect(mapStateToProps, null)(Catalog);\n\nexport {\n  connectedCatalog as Catalog,\n};\n","import React from 'react';\nimport './Basket.css';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst Basket = ({ basket, deleteItem }) => {\n  const totalPrice = () => {\n    let price = 0;\n    [...basket].forEach((item) => {\n      price += (item.amount * item.price);\n    });\n    return price;\n  };\n\n  return (\n    <div>\n      <Paper>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>ID</TableCell>\n              <TableCell align=\"left\">Name</TableCell>\n              <TableCell align=\"left\">Label</TableCell>\n              <TableCell align=\"left\">Amount</TableCell>\n              <TableCell align=\"left\">Price</TableCell>\n              <TableCell align=\"left\" />\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {basket.map((item) => (\n              <TableRow key={item.id + Math.random()}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {item.id}\n                </TableCell>\n                <TableCell align=\"left\">{item.name}</TableCell>\n                <TableCell align=\"left\">{item.label}</TableCell>\n                <TableCell align=\"left\">{item.amount}</TableCell>\n                <TableCell align=\"left\">{item.price}</TableCell>\n                <TableCell><Button variant=\"contained\" color=\"primary\" onClick={() => deleteItem(item.id)}>Delete</Button></TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n      <p className=\"price_label\">\n        Total price:\n        {totalPrice()}\n        $\n      </p>\n    </div>\n  );\n};\n\nBasket.propTypes = {\n  basket: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    price: PropTypes.number,\n    amount: PropTypes.number,\n  })),\n  deleteItem: PropTypes.func,\n}.isRequaired;\n\nexport default Basket;\n","import { connect } from 'react-redux';\nimport Basket from './Basket';\nimport { deleteItem } from '../../store/actions';\n\nconst mapStateToProps = (state) => ({\n  basket: state.basket,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (id) => dispatch(deleteItem(id)),\n});\n\nconst connectedBasket = connect(mapStateToProps, mapDispatchToProps)(Basket);\n\nexport {\n  connectedBasket as Basket,\n};\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport StoreIcon from '@material-ui/icons/Store';\nimport { Catalog } from '../Catalog/index';\nimport { Basket } from '../Basket/index';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { loadData } = this.props;\n    loadData();\n  }\n\n  totalAmount = () => {\n    const { basket } = this.props;\n    let amount = 0;\n    [...basket].forEach((item) => {\n      amount += item.amount;\n    });\n    return amount;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AppBar position=\"static\">\n            <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <Typography variant=\"h6\" noWrap>\n                My store\n              </Typography>\n              <div>\n                <Link to=\"/\" className=\"link\">\n                  <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n                    <Badge color=\"secondary\">\n                      <StoreIcon />\n                    </Badge>\n                  </IconButton>\n                </Link>\n                <Link to=\"/basket\" className=\"link\">\n                  <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n                    <Badge badgeContent={this.totalAmount()} color=\"secondary\">\n                      <ShoppingCartIcon />\n                    </Badge>\n                  </IconButton>\n                </Link>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </header>\n        <main>\n          <Switch>\n            <Route path=\"/basket\" component={Basket} />\n            <Route path=\"/\" component={Catalog} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  loadData: PropTypes.func,\n  basket: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    price: PropTypes.number,\n  })),\n}.isRequaired;\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { loadData } from '../../store/actions';\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadData: () => dispatch(loadData()),\n});\n\nconst mapStateToProps = (state) => ({\n  basket: state.basket,\n});\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport {\n  connectedApp as App,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './index.css';\nimport { App } from './Components/App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}